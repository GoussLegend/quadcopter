/*
  Radio.cpp - Library for flashing Radio code.
  Created by David A. Mellis, November 2, 2007.
  Released into the public domain.
*/

#include "Arduino.h"
#include "Radio.h"
#include <PinChangeInt.h>


Radio::Radio(int pin)
{
  pinMode(pin, OUTPUT);
  _pin = pin;
}

void Radio::attach()
{
  PCintPort::attachInterrupt(_PIN, calcCh1,CHANGE);
}

void Radio::check()
{
  // check shared update flags to see if any channels have a new signal
  if(bUpdateFlagsShared)
  {
    noInterrupts(); // turn interrupts off quickly while we take local copies of the shared variables

    // take a local copy of which channels were updated in case we need to use this in the rest of loop
    bUpdateFlags = bUpdateFlagsShared;
   
    // in the current code, the shared values are always populated
    // so we could copy them without testing the flags
    // however in the future this could change, so lets
    // only copy when the flags tell us we can.
   


   
      unCh1In = unCh1InShared;
    

  


    // clear shared copy of updated flags as we have already taken the updates
    // we still have a local copy if we need to use it in bUpdateFlags
    bUpdateFlagsShared = 0;
   
    interrupts(); // we have local copies of the inputs, so now we can turn interrupts back on
    // as soon as interrupts are back on, we can no longer use the shared copies, the interrupt
    // service routines own these and could update them at any time. During the update, the
    // shared copies may contain junk. Luckily we have our local copies to work with :-)
  }
 
  // do any processing from here onwards
  // only use the local values unAuxIn, unThrottleIn and unSteeringIn, the shared
  // variables unAuxInShared, unThrottleInShared, unSteeringInShared are always owned by
  // the interrupt routines and should not be used in loop
 

//value in [MAP_RADIO_LOW - MAP_RADIO_HIGH]
ch1 = MAP_RADIO_HIGH - map(unCh1In, MIN_1, MAX_1, MAP_RADIO_LOW, MAP_RADIO_HIGH);







Serial.println(ch1);


  bUpdateFlags = 0;
}

void Radio::calcCh1()
{
  if(digitalRead(_pin) == HIGH)
  {
    ulCh1Start = micros();
  }
  else
  {
    unCh1InShared = (uint16_t)(micros() - ulCh1Start);
    bUpdateFlagsShared |= CH1_FLAG;
  }
}

